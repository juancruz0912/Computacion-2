'''Objetivo:** Comprimir m√∫ltiples archivos en paralelo usando diferentes algoritmos.

**Requisitos:**
1. Crear 10 archivos de texto con contenido aleatorio
2. Comprimir cada uno con gzip usando ProcessPoolExecutor
3. Comparar tiempo secuencial vs paralelo
4. Calcular ratio de compresi√≥n promedio
5. Mostrar progreso: "Comprimido 3/10 archivos..."
'''

import gzip
import shutil
import time
import random
import string
from pathlib import Path
from concurrent.futures import ProcessPoolExecutor, as_completed, ThreadPoolExecutor



# Con un tama√±o peque√±o de archivos, tardo mas en crear los preocesos que en lo que gano en procesamiento, 
# en caso contrario, si los archivos son mas pesados, el cuello de bottela es al cpu y ahi se ve la diferencia usando procesos vs hilos
def crear_archivos(carpeta: Path, cantidad=10, tama√±o_kb=100):
    carpeta.mkdir(exist_ok=True)
    for i in range(cantidad):
        ruta = carpeta / f"archivo_{i+1}.txt"
        with open(ruta, "w") as f:
            # cada archivo tendr√° texto aleatorio de tama√±o_kb kilobytes aprox.
            texto = ''.join(random.choices(string.ascii_letters + string.digits + " \n", k=tama√±o_kb * 1024))
            f.write(texto)
    print(f"‚úÖ Se crearon {cantidad} archivos en {carpeta}")


def comprimir_archivo(ruta_entrada: Path):
    ruta_salida = ruta_entrada.with_suffix('.gz')
    with open(ruta_entrada, 'rb') as f_in:
        with gzip.open(ruta_salida, 'wb') as f_out:
            shutil.copyfileobj(f_in, f_out)

    return {
        'archivo': ruta_entrada.name,
        'tama√±o_original': ruta_entrada.stat().st_size,
        'tama√±o_comprimido': ruta_salida.stat().st_size
    }


def comprimir_secuencial(archivos):
    print("\nüïê Compresi√≥n secuencial iniciada...")
    inicio = time.time()
    resultados = []
    for i, archivo in enumerate(archivos, start=1):
        info = comprimir_archivo(archivo)
        resultados.append(info)
        print(f"Comprimido {i}/{len(archivos)} archivos...")
    duracion = time.time() - inicio
    return resultados, duracion


def comprimir_paralelo_procesos(archivos):
    print("\n Compresi√≥n paralela iniciada...")
    inicio = time.time()
    resultados = []
    with ProcessPoolExecutor() as executor:
        futures = {executor.submit(comprimir_archivo, archivo): archivo for archivo in archivos}
        for i, future in enumerate(as_completed(futures), start=1):
            info = future.result()  # bloquea hasta que ese proceso termina
            resultados.append(info)
            print(f"Comprimido {i}/{len(archivos)} archivos...")
    duracion = time.time() - inicio
    return resultados, duracion

def comprimir_paralelo_hilos(archivos):
    print("\n Compresi√≥n paralela iniciada...")
    inicio = time.time()
    resultados = []
    with ThreadPoolExecutor() as executor:
        futures = {executor.submit(comprimir_archivo, archivo): archivo for archivo in archivos}
        for i, future in enumerate(as_completed(futures), start=1):
            info = future.result()  # bloquea hasta que ese proceso termina
            resultados.append(info)
            print(f"Comprimido {i}/{len(archivos)} archivos...")
    duracion = time.time() - inicio
    return resultados, duracion


def calcular_ratio_promedio(resultados):
    ratios = [r['tama√±o_comprimido'] / r['tama√±o_original'] for r in resultados]
    return sum(ratios) / len(ratios)


# --- Programa principal ---
if __name__ == "__main__":
    carpeta = Path("archivos_prueba")
    crear_archivos(carpeta)

    archivos = list(carpeta.glob("*.txt"))

    # Secuencial
    resultados_seq, t_seq = comprimir_secuencial(archivos)
    ratio_seq = calcular_ratio_promedio(resultados_seq)

    # Paralelo procesos
    resultados_par, t_par_p = comprimir_paralelo_procesos(archivos)
    ratio_par_p = calcular_ratio_promedio(resultados_par)
    
    # Paralelo hilos
    resultados_par, t_par_i = comprimir_paralelo_hilos(archivos)
    ratio_par_i = calcular_ratio_promedio(resultados_par)

    print("\nüìä RESULTADOS FINALES:")
    print(f"Tiempo secuencial: {t_seq:.2f} s")
    print(f"Tiempo paralelo_procesos:   {t_par_p:.2f} s")
    print(f"Tiempo paralelo_hilos:   {t_par_i:.2f} s")
    print(f"Ratio promedio secuencial: {ratio_seq:.2f}")
    print(f"Ratio promedio paralelo (procesos):   {ratio_par_p:.2f}")
    print(f"Ratio promedio paralelo (hilos):   {ratio_par_i:.2f}")


